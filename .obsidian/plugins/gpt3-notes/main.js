/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => GPT3Notes
});
module.exports = __toCommonJS(main_exports);

// src/GPT3.ts
var import_obsidian = require("obsidian");
var GPT3Model = class {
  constructor() {
  }
  static async generate(token, params) {
    const request_param = {
      url: "https://api.openai.com/v1/completions",
      contentType: "application/json",
      method: "POST",
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        model: params.model,
        prompt: params.prompt,
        temperature: params.temperature,
        max_tokens: params.tokens
      })
    };
    try {
      const response_raw = await (0, import_obsidian.request)(request_param);
      const data = JSON.parse(response_raw);
      return data;
    } catch (e) {
      new import_obsidian.Notice("There was an error. Please check your token or try again.");
      return false;
    }
  }
};

// src/PluginModal.ts
var import_obsidian3 = require("obsidian");

// src/SettingsView.ts
var import_obsidian2 = require("obsidian");
var models = [
  "text-davinci-003",
  "text-curie-001",
  "text-babbage-001",
  "text-ada-001"
];
var SettingsView = class extends import_obsidian2.PluginSettingTab {
  constructor(plugin) {
    super(plugin.app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h1", { text: "GPT-3 Settings" });
    new import_obsidian2.Setting(containerEl).setName("OpenAI API Key").setDesc("The token generated in your OpenAI dashboard.").addText((text) => {
      text.setPlaceholder("Token").setValue(this.plugin.settings.token || "").onChange(async (change) => {
        this.plugin.settings.token = change;
        await this.plugin.saveSettings();
      });
    }).addButton((button) => {
      button.setButtonText("Generate token");
      button.onClick((evt) => {
        window.open("https://beta.openai.com/account/api-keys");
      });
    });
    new import_obsidian2.Setting(containerEl).setName("OpenAI Model").setDesc("The type of GPT-3 model to use.").addDropdown((dropdown) => {
      for (let model in models) {
        dropdown.addOption(models[model], models[model]);
      }
      dropdown.onChange((change) => {
        this.plugin.settings.model = change;
      });
      dropdown.setValue(this.plugin.settings.model);
    });
    new import_obsidian2.Setting(containerEl).setName("Delete history").setDesc("This will purge your prompt history").addButton((button) => {
      button.setButtonText("Delete");
      button.onClick((evt) => {
        try {
          this.plugin.history_handler.reset();
          new import_obsidian2.Notice("History reset");
        } catch (e) {
        }
      });
    });
  }
};

// prompts.json
var prompts_default = {
  prefix: [
    "Write an essay",
    "Write dashed notes",
    "Write bullet notes",
    "Write paragraphs",
    "Write an article",
    "Create a manual",
    "Create an outline",
    "Write a summary",
    "Write a program"
  ],
  postfix: [
    "with sources",
    "with footnotes",
    "with comments",
    "with quotes"
  ]
};

// src/PluginModal.ts
var PluginModal = class extends import_obsidian3.Modal {
  constructor(plugin) {
    super(plugin.app);
    this.plugin = plugin;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.setText("Create a GPT-3 Note");
    const container = contentEl.createDiv();
    container.className = "gpt_plugin-container";
    let history_dropdown = new import_obsidian3.DropdownComponent(container);
    history_dropdown.selectEl.className = "gpt_history-dropdown";
    let history = this.plugin.settings.promptHistory;
    history_dropdown.addOption("History", "History");
    for (let i = history.length - 1; i >= 0; i--) {
      if (history[i].prompt.length > 80) {
        history_dropdown.addOption(`${i}`, history[i].prompt.slice(0, 80) + "...");
        continue;
      }
      history_dropdown.addOption(`${i}`, history[i].prompt);
    }
    history_dropdown.onChange((change) => {
      try {
        const index = parseInt(change);
        this.useHistoryItem(history[index]);
        history_dropdown.setValue("History");
      } catch (e) {
      }
    });
    const dropdownsDiv = container.createDiv();
    dropdownsDiv.className = "gpt_dropdowns-div";
    this.tokenSection(dropdownsDiv, "Prefix", prompts_default.prefix);
    this.tokenSection(dropdownsDiv, "Postfix", prompts_default.postfix);
    this.promptField = new import_obsidian3.TextAreaComponent(container);
    this.promptField.inputEl.className = "gpt_prompt-field";
    this.promptField.setPlaceholder("Enter your prompt...");
    this.promptField.onChange((change) => {
      this.prompt = change;
    });
    const tempSetting = new import_obsidian3.Setting(container).setName("Temperature").setDesc("The amount of variation in the model (randomness).").addDropdown((dropdown) => {
      for (let i = 0; i <= 10; i++) {
        if (i == 5) {
          dropdown.addOption(`${i}`, "5 (default)");
          continue;
        }
        dropdown.addOption(`${i}`, `${i}`);
      }
      dropdown.setValue(`${this.plugin.settings.temperature}`);
      dropdown.onChange((change) => {
        this.plugin.settings.temperature = parseInt(change);
        this.plugin.saveSettings();
      });
    });
    tempSetting.controlEl.className = "gpt_temp-setting";
    const tokenSetting = new import_obsidian3.Setting(container).setName("Tokens").setDesc("The number of tokens GPT-3 should generate.").addText((text) => {
      text.setValue(`${this.plugin.settings.tokens}`);
      text.inputEl.type = "number";
      text.onChange((change) => {
        this.plugin.settings.tokens = parseInt(change);
        this.plugin.saveSettings();
      });
    });
    new import_obsidian3.Setting(container).setName("OpenAI Model").setDesc("The type of GPT-3 model to use.").addDropdown((dropdown) => {
      for (let model in models) {
        dropdown.addOption(models[model], models[model]);
      }
      dropdown.onChange((change) => {
        this.plugin.settings.model = change;
        this.plugin.saveSettings();
      });
      dropdown.setValue(this.plugin.settings.model);
    });
    const buttonContainer = container.createDiv();
    buttonContainer.className = "gpt_button-container";
    const cancelButton = new import_obsidian3.ButtonComponent(buttonContainer);
    cancelButton.buttonEl.className = "gpt_cancel-button";
    cancelButton.buttonEl.style.backgroundColor = "#b33939";
    cancelButton.setButtonText("Cancel").onClick(() => {
      this.close();
    });
    this.generateButton = new import_obsidian3.ButtonComponent(buttonContainer);
    this.generateButton.buttonEl.className = "gpt_generate-button";
    this.generateButton.buttonEl.style.backgroundColor = "#218c74";
    this.generateButton.setButtonText("Generate Notes").onClick(() => {
      this.generateButton.setButtonText("Loading...");
      this.generateButton.setDisabled(true);
      this.generateButton.buttonEl.style.backgroundColor = "rbga(33, 140, 116, 0.5)";
      this.handleGenerateClick();
    });
  }
  tokenSection(container, label, options) {
    const dropdown = new import_obsidian3.DropdownComponent(container);
    dropdown.addOption(label, label);
    for (let i in options) {
      dropdown.addOption(options[i], options[i]);
    }
    dropdown.onChange((change) => {
      const newValue = this.promptField.getValue() + change + " ";
      this.promptField.setValue(newValue);
      this.promptField.inputEl.focus();
      this.prompt = newValue;
      dropdown.setValue(label);
    });
    return dropdown;
  }
  useHistoryItem(item) {
    this.promptField.setValue(item.prompt);
    this.prompt = item.prompt;
  }
  async handleGenerateClick() {
    const view = this.plugin.app.workspace.getActiveViewOfType(import_obsidian3.MarkdownView);
    if (!view) {
      new import_obsidian3.Notice("You must have a Markdown file open to complete this action.");
      this.generateButton.setDisabled(false);
      this.generateButton.setButtonText("Generate Notes");
      return;
    }
    const params = {
      prompt: this.prompt,
      temperature: this.plugin.settings.temperature / 10,
      tokens: this.plugin.settings.tokens,
      model: this.plugin.settings.model
    };
    let token = this.plugin.settings.token;
    if (!token) {
      new import_obsidian3.Notice("Please enter your OpenAI token in the plugin settings");
      this.generateButton.setDisabled(false);
      this.generateButton.setButtonText("Generate Notes");
      return;
    }
    const response = await GPT3Model.generate(token, params);
    if (!response) {
      this.generateButton.setDisabled(false);
      this.generateButton.setButtonText("Generate Notes");
      return;
    }
    this.plugin.history_handler.push({
      prompt: params.prompt,
      temperature: params.temperature,
      tokens: params.tokens
    });
    this.close();
    this.plugin.showPreviewModal(params, response);
  }
};

// src/CommandHandler.ts
var CommandHandler = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  setup() {
    this.plugin.addCommand({
      id: "create-gpt3-note",
      name: "Create GPT-3 Note",
      callback: () => {
        new PluginModal(this.plugin).open();
      }
    });
  }
};

// src/HistoryHandler.ts
var HistoryHandler = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  push(history_item) {
    try {
      let history = this.plugin.settings.promptHistory;
      history.push(history_item);
      if (history.length > 10) {
        history.remove(history[0]);
      }
      this.plugin.settings.promptHistory = history;
      this.plugin.saveSettings();
      return true;
    } catch (exception) {
      return false;
    }
  }
  reset() {
    this.plugin.settings.promptHistory = [];
    this.plugin.saveSettings();
  }
};

// src/main.ts
var import_obsidian5 = require("obsidian");

// src/PreviewModal.ts
var import_obsidian4 = require("obsidian");
var PreviewModal = class extends import_obsidian4.Modal {
  constructor(plugin, modelParams, modelResponse) {
    super(plugin.app);
    this.plugin = plugin;
    this.modelParams = modelParams;
    this.modelResponse = modelResponse;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.setText("Preview GPT-3 Note");
    const container = contentEl.createDiv();
    container.className = "gpt_preview-container";
    const text = this.modelResponse.choices[0].text;
    const tokens = text.split("\n");
    for (let i = 0; i < tokens.length; i++) {
      container.createEl("p", {
        text: tokens[i]
      });
    }
    const buttonContainer = contentEl.createDiv();
    buttonContainer.className = "gpt_preview-button-container";
    const cancelButton = new import_obsidian4.ButtonComponent(buttonContainer);
    cancelButton.buttonEl.style.backgroundColor = "#b33939";
    cancelButton.setButtonText("Cancel").onClick(() => {
      this.close();
    });
    const generateButton = new import_obsidian4.ButtonComponent(buttonContainer);
    generateButton.buttonEl.style.backgroundColor = "#218c74";
    generateButton.setButtonText("Add to document").onClick(() => {
      const view = this.plugin.app.workspace.getActiveViewOfType(import_obsidian4.MarkdownView);
      if (view) {
        this.close();
        view.editor.replaceSelection(text.slice(2, text.length));
      }
    });
  }
  onClose() {
  }
};

// src/main.ts
var DEFAULT_SETTINGS = {
  appName: "GP3_NOTES",
  token: null,
  model: models[0],
  tokens: 300,
  temperature: 5,
  promptHistory: []
};
var GPT3Notes = class extends import_obsidian5.Plugin {
  async onload() {
    await this.loadSettings();
    this.settings_view = new SettingsView(this);
    this.command_handler = new CommandHandler(this);
    this.command_handler.setup();
    this.history_handler = new HistoryHandler(this);
    this.addSettingTab(this.settings_view);
    this.registerRibbonButtons();
  }
  onunload() {
  }
  registerRibbonButtons() {
    const ribbonIcon = this.addRibbonIcon("bot", "GPT-3 Notes", (evt) => {
      new PluginModal(this).open();
    });
  }
  showPreviewModal(modelParams, response) {
    new PreviewModal(this, modelParams, response).open();
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
